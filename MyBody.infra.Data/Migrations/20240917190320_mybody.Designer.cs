// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBody.infra.Data;

#nullable disable

namespace MyBody.infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240917190320_mybody")]
    partial class mybody
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyBody.Domain.BodyComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BodyFat")
                        .HasColumnType("float");

                    b.Property<double>("BodyMass")
                        .HasColumnType("float");

                    b.Property<double>("BodyWanter")
                        .HasColumnType("float");

                    b.Property<double>("WeightBone")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("MyBody.Domain.BodyMeasurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MeasureAbs")
                        .HasColumnType("float");

                    b.Property<double>("MeasureChest")
                        .HasColumnType("float");

                    b.Property<double>("MeasureLeftArm")
                        .HasColumnType("float");

                    b.Property<double>("MeasureLeftCalf")
                        .HasColumnType("float");

                    b.Property<double>("MeasureLeftForeArm")
                        .HasColumnType("float");

                    b.Property<double>("MeasureLeftThigh")
                        .HasColumnType("float");

                    b.Property<double>("MeasureRightArm")
                        .HasColumnType("float");

                    b.Property<double>("MeasureRightCalf")
                        .HasColumnType("float");

                    b.Property<double>("MeasureRightForeArm")
                        .HasColumnType("float");

                    b.Property<double>("MeasureRightThigh")
                        .HasColumnType("float");

                    b.Property<double>("MeasureShoulders")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("MyBody.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyCompositionId")
                        .HasColumnType("int");

                    b.Property<int>("BodyMeasurementsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyCompositionId");

                    b.HasIndex("BodyMeasurementsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyBody.Domain.User", b =>
                {
                    b.HasOne("MyBody.Domain.BodyComposition", "BodyComposition")
                        .WithMany()
                        .HasForeignKey("BodyCompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBody.Domain.BodyMeasurements", "BodyMeasurements")
                        .WithMany()
                        .HasForeignKey("BodyMeasurementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyComposition");

                    b.Navigation("BodyMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
